model "MPK example"
	uses "mmxprs"

    
    ! Lectura de Datos
    
	declarations
		n, m, index, c: integer
	end-declarations
	fopen("gen100_1.txt", F_INPUT)
	read(n, c)
    m := 3 ! Número de Contenedores
	declarations
		containers = 1..m;
		objects = 1..n;
		value: array(objects) of real
		weight: array(objects) of real
	end-declarations
	forall(j in objects)
		read(index, value(j), weight(j) )
	fclose(F_INPUT)
	
	
	! Modelos PL
	! -------------------------------------------------------------------

    writeln
	writeln("Programacion Lineal:")
	writeln
	
	
    declarations
		x: array(containers, objects) of mpvar
	end-declarations
	
	obj := sum(i in containers, j in objects) value(j) * x(i, j)
	forall(i in containers)
		res_size(i):= sum(j in objects) weight(j) * x(i, j) <= c
	forall(j in objects)
	    res_unique(j) := sum(i in containers) x(i, j) <= 1
	
	! Modelo de Programación Lineal Relajado:
	
	maximize(obj)
	obj_value := sum(i in containers, j in objects | getsol(x(i, j)) > 0.95) value(j)
	writeln("PL Relajado:")
	writeln("\tobj = ", obj_value)
	forall(i in containers) do
	    write("\tC = ", i, ":")
	    forall(j in objects | getsol(x(i, j)) > 0.95) do
	        write(" ", j)
	    end-do
	    writeln
	end-do
	writeln
	
	! PL con Heurística de Redondeo Simple:
	
	
	
	maximize(obj)
	obj_value := sum(i in containers, j in objects | round(getsol(x(i, j))) = 1) value(j)
	writeln("PL Redondeo Simple:")
	writeln("\tobj = ", obj_value)
	forall(i in containers) do
	    write("\tC = ", i, ":")
	    forall(j in objects | round(getsol(x(i, j))) = 1) do
	        write(" ", j)
	    end-do
	    writeln
	end-do
	writeln
	
	! Acotación sobre el valor óptimo z: zp <= z <= z_LP:

    
    
    writeln("PL con Acotacion:")

    writeln

	! Modelo Programación Lineal Exacto:
	
	forall(i in containers, j in objects)
		x(i, j) is_binary
	maximize(obj)

    obj_value := getobjval
    writeln("PL Exacto:")
	writeln("\tobj = ", obj_value)
	forall(i in containers) do
	    write("\tC = ", i, ":")
	    forall(j in objects | getsol(x(i, j)) > 0.95) do
	        write(" ", j)
	    end-do
	    writeln
	end-do
	writeln
	
	
	! Modelos HEURISTICOS:
	! -------------------------------------------------------------------
	
	writeln
	writeln("Heuristicas:")
	writeln
	
	declarations
		! TODO
		x_h: array(containers, objects) of integer
	end-declarations
	
	! Heurística Greedy:
	
	
	! Heurística de Intercambios:
	
	
	! Heurística Greedy Aleatorizado:
	
	
	! Heurística GRASP:

end-model
