model ""
	uses "mmxprs"; !gain access to the Xpress-Optimizer solver
	
	declarations
		n: integer
	 	m: integer
	end-declarations

	
	fopen("tema-2-p4-c2.dat",F_INPUT)
			read(m)
			read(n)
			declarations
				pservicio = 1..n
				pdemanda = 1..m
				
				p_range = 1..10
				dc = 250
				a:array(pdemanda, pservicio) of integer
				
				dem:array(pdemanda) of real
				porcent:real
				
				x:array(pservicio) of mpvar 
				z:array(pdemanda) of mpvar
				 
			end-declarations
			
			forall(i in pdemanda)
				read(dem(i))
			
			forall(i in pdemanda)
				forall(j in pservicio)
					read(a(i,j))
			
			
	fclose(F_INPUT)
	
	writeln("Problema de cubrimiento, m = ", m, ", n = ", n, "\n")
	
	dem_cub:=sum(i in pdemanda)
		dem(i) * z(i)
	
	forall(i in pdemanda)
		rescub(i):= sum(j in pservicio | a(i,j) <= dc)
			a(i,j) * x(j) >= z(i)
			
	forall(j in pservicio)
		x(j)is_binary
	
	forall(i in pdemanda)
		z(i)is_binary
	
	!exportprob(EP_MAX,"",dem_cub)
	!writeln("Demanda m?xima: ",max(i in pdemanda)dem(i))
	
	forall(p in p_range)do
		
		rest:= sum(j in pservicio) 
			x(j) = p
			
		maximize(dem_cub)
		
		!writeln("Demanda cubierta: ",getobjval)
		porcent := 100 * getobjval / sum(i in pdemanda) dem(i)
		
		writeln("p = ", p)
		writeln("Porcentaje cubierto: ", porcent, " %")
		write("Puntos abiertos: ")
		forall(j in pservicio | x(j).sol = 1)
			write(j, "  ")
			
		writeln("\n")
	end-do
	
end-model