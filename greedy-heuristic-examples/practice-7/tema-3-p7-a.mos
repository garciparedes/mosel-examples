model ""
	uses "mmxprs"; !gain access to the Xpress-Optimizer solver

	declarations
		p_init: integer
		p_max: integer
		n: integer
	 	m: integer
	 	dc: integer
	end-declarations

	initializations from "aint1.dat"
		p_init
		p_max
		n
		m
		dc
	end-initializations

	declarations
		p_range = p_init..p_max
			
		servicios = 1..n
		demandas = 1..m

		d:array(demandas, servicios) of integer
		h:array(demandas) of integer

		x:array(servicios) of mpvar
		z:array(demandas) of mpvar
		
	end-declarations

	forall(j in servicios)
		x(j)is_binary

	forall(j in servicios)
		z(j)is_binary

	initializations from "aint1.dat"
		h
		d
	end-initializations


	dem_cub:=sum(i in demandas)
		h(i) * z(i)
	
	forall(i in demandas)
		rescub(i):= sum(j in servicios | d(i,j) <= dc)
			x(j) >= z(i)
	
	forall(p in p_range)do
		writeln("p = ", p)
		
		! Greedy Solution
		!############################################################
		
		
		! Random Greedy Solution
		!############################################################
		
		
		
		! Xpress Solution
		!############################################################
		
		rest:= sum(j in servicios) 
			x(j) = p
			
		maximize(dem_cub)
		write("opened: ")
		forall(j in servicios | x(j).sol = 1)
			write(j, "  ")
		writeln("\n")
		
	end-do
end-model
