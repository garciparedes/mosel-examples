model ""
	uses "mmxprs"; !gain access to the Xpress-Optimizer solver
	
	declarations
		n: integer
	end-declarations

	initializations from "model.dat"
		n
	end-initializations
	
	declarations
		poblaciones = 1..n
		p_range = 7..10
		
		d:array(poblaciones, poblaciones) of real
		h:array(poblaciones) of integer
		
		d_max:real
		data: array(poblaciones, 1..4) of integer
		
		x:array(poblaciones) of mpvar 
		y:array(poblaciones, poblaciones) of mpvar
		 
	end-declarations
	
	initializations from "model.dat"
		data
	end-initializations
	
	forall(i in poblaciones) do
		h(i) := data(i,4)
	end-do
	
	
	fclose(F_INPUT)
	
	forall(i in poblaciones)
		forall(j in poblaciones)
			d(i,j) :=  + sqrt((data(i,2) - data(j,2))^2 + (data(i,3) - data(j,3))^2)

	
	forall(j in poblaciones)
		x(j)is_binary
	
	forall(i in poblaciones)
		forall(j in poblaciones)
			y(i, j)is_binary
			
			
	z := sum(i in poblaciones)
		sum(j in poblaciones)
			h(i) * d(i,j) * y(i,j)
	
	forall(i in poblaciones)
		rescub(i):= sum(j in poblaciones)
			y(i,j) = 1
			
	forall(i in poblaciones)
		forall(j in poblaciones)
			res2(i, j):= y(i,j) <= x(j)
	
	!exportprob(EP_MIN,"",z)
	
	
	forall(p in p_range)do
		
		rest := sum(j in poblaciones) 
		x(j) = p
		
		minimize(z)
	
		d_max := max(i in poblaciones)
			 		max(j in poblaciones) 
			 			h(i) * d(i,j) * y(i,j).sol
			 		
			 		
		writeln("p = ", p)
		writeln("d_promedio = ", getobjval / n)
		writeln("d_max = ", d_max)
		write("x_abiertos = { ")
		forall(j in poblaciones | x(j).sol = 1)
			write(j, " ")
		writeln("}\n")
		end-do
	
end-model