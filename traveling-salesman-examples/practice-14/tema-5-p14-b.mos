model ""
	uses "mmxprs";

	declarations
		n:		integer
	end-declarations

	initializations from "n40w60.004.dat"
		n
	end-initializations

	declarations
		nodes 	= 1..n
		d:		array(nodes, nodes) of real
		tm:		array(nodes, 1..2) of real


		x:		array(nodes, nodes) of mpvar
		u:		array(nodes) of mpvar
		beta:	array(nodes) of mpvar
	end-declarations

	initializations from "n40w60.004.dat"
		d
		tm
	end-initializations


	forall(i in nodes)
		d(i,i) := MAX_INT

	forall(i in nodes)
		res_j(i) := sum(j in nodes | i <> j) x(i,j) = 1


	forall(j in nodes)
		res_i(j) := sum(i in nodes | i <> j) x(i,j) = 1


	forall(i in nodes, j in nodes)
			x(i,j) is_binary

	forall(i in nodes, j in nodes | j <> 1)
		res_i_j(i,j) := beta(i) + d(i,j) - MAX_INT * ( 1 - x(i,j) ) <= beta(j)


	forall(i in nodes) do
		res_beta_min(i) := tm(i, 1) <= beta(i)
		res_beta_max(i) := beta(i) <= tm(i, 2)
	end-do



	forall(i in nodes | i <> 1) do
		res_u_down(i) := 2 <= u(i)
		res_u_up(i) := u(i) <= n
	end-do
	res_u := u(1) = 1



	forall(i in nodes)
		forall(j in nodes | i <> 1 and j <> 1)
			res_MTZ(i, j) := (u(i) - u(j) +1) <= ((n-1)*(1 - x(i,j)))

	obj := sum(i in nodes)
			sum(j in nodes)
				d(i,j) * x(i,j)
	minimize(obj)


	distance := 0.0
	writeln("coordinates: ")
	forall(i in nodes,j in nodes | x(i,j).sol = 1) do
		writeln("(", i, ", ", j, ")")
		distance := distance +d(i,j)
	end-do
	writeln("distance: ", distance)


end-model
