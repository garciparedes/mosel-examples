model ""
	uses "mmxprs";
	uses "mmive"
	uses "mmsystem"
	
	setparam("XPRS_MAXTIME", 60)
	
	declarations
		n:		integer
	end-declarations

	initializations from "burma14.dat"
		n
	end-initializations
	
	declarations
		nodes 	= 1..n
		coords: array(nodes, 1..3) of real
		d:		array(nodes, nodes) of integer
		x:		array(nodes, nodes) of mpvar
		u:		array(nodes) of mpvar
	end-declarations

	initializations from "burma14.dat"
		coords
	end-initializations
	
	forall(i in nodes)
		forall(j in nodes)
			d(i,j) :=  ceil(sqrt((coords(i,2) - coords(j,2))^2 + (coords(i,3) - coords(j,3))^2))
	
	forall(i in nodes)
		res_j(i) := sum(j in nodes) x(i,j) = 1
	

	forall(j in nodes)
		res_i(j) := sum(i in nodes) x(i,j) = 1
		
	obj := sum(i in nodes)
			sum(j in nodes)
				d(i,j) * x(i,j)
	
	forall(i in nodes)
		forall(j in nodes)
			x(i,j) is_binary
			
			
	
	
	
	forall(i in nodes | i <> 1) do
		res_u_down(i) := 2 <= u(i) 
		res_u_up(i) := u(i) <= n
	end-do
	res_u := u(1) = 1
	
	
	
	forall(i in nodes)
		forall(j in nodes | i <> 1 and j <> 1)
			res_MTZ(i, j) := (u(i) - u(j) +1) <= ((n-1)*(1 - x(i,j)))
	
	minimize(obj)
	
	
	t := 1
	write("path: ")
	forall(i in nodes) do
		forall(j in nodes | x(t,j).sol = 1) do
			write(" -> ",t)
			t := j
		end-do
	end-do
	
	id1 := IVEaddplot("points", IVE_RED)
	id2 := IVEaddplot("lines", IVE_BLUE)
	
	forall(i in nodes) do
			IVEdrawpoint(id1, coords(i,2), coords(i,3))
	end-do
	
	forall(i in nodes) do
		forall(j in nodes | x(i,j).sol = 1) do
			IVEdrawline(id2, coords(i,2), coords(i,3), coords(j,2), coords(j,3))
		end-do
	end-do

end-model
