model ""
	uses "mmxprs";
	uses "mmsystem"
	
	setparam("XPRS_MAXTIME", 60)
	
	declarations
		n:		integer
		stop_mejoras: integer
	end-declarations

	initializations from "n21_1.dat"
		n
		stop_mejoras
	end-initializations
	
	declarations
		nodes 	= 1..n
		d:		array(nodes, nodes) of integer
		visited:array(nodes) of integer
		result:	array(nodes, nodes) of integer
	end-declarations

	initializations from "n21_1.dat"
		d
	end-initializations
	
	forall(i in nodes) visited(i) := 0 
	forall(i in nodes, j in nodes) result(i, j) := 0 
	
	initial := ceil(random * n)
	current := initial
	visited(current) :=1
	forall(t in nodes) do
		aux := MAX_INT
		selected:=-1
		forall(i in nodes | visited(i) = 0) do
			if(aux > d(current, i)) then
				aux := d(current, i)
				selected := i
			end-if
		end-do
		if(selected = -1) then
			selected := initial
		end-if
		result(current, selected) := 1
		current := selected
		visited(current):= 1
	end-do
	
	distance := 0.0
	forall(i in nodes) do
		forall(j in nodes | result(i,j) = 1) do
			!writeln("(", i, ", ", j, ")")
			distance := distance +d(i,j)
		end-do
	end-do
	writeln("distance: ", distance)

	
	
	
	forall(i in nodes, j in nodes) do
		result_star(i,j) := result(i,j)
		result_old(i,j) := result(i,j)
	end-do
	dist_star := sum(i in nodes, j in nodes | result_star(i,j) = 1) d(i,j)
	temp := 0.5
	no_mejoras := 0
	while(no_mejoras < stop_mejoras) do
		changed :=0
		
		dist_old := sum(i in nodes, j in nodes | result_old(i,j) = 1) d(i,j)
		
		
		!generar solución random
		!
		!				
		forall(ii in nodes, jj in nodes) result_current(ii,jj) := result_old(ii,jj)

		
		i_1 := ceil(n*random)
		j_1 := i_1
		while(i_1 = j_1) do
			j_1 := ceil(n*random)
		end-do	
	
		forall(k in nodes| result_old(i_1, k) = 1) i_2 := k
		forall(k in nodes| result_old(j_1, k) = 1) j_2 := k
		!writeln(i_1," ", i_2, "\t", j_1, " ", j_2)
		result_current(i_1, i_2) := 0
		result_current(j_1, j_2) := 0
		
		result_current(i_1, j_1) := 1
		result_current(i_2, j_2) := 1
		
		stop_reverse:= 0
		index_reverse := i_2
		old := index_reverse
		while(stop_reverse = 0) do
		    aux := -1
		    !write("-")
		    forall(k in nodes| k <> old and result_current(index_reverse, k) = 1) aux := k
		    result_current(index_reverse, aux):=0 
		    result_current(aux,index_reverse):=1
		    old := index_reverse
		    index_reverse := aux
		    if(index_reverse = j_1) then
		        stop_reverse := 1
		    end-if
		end-do

		
		dist_current := sum(i in nodes, j in nodes | result_current(i,j) = 1) d(i,j)
		!writeln(dist_current,"\t",dist_old)
		if(dist_current < dist_old) then
			forall(i in nodes, j in nodes) do
				result_old(i,j) := result_current(i,j)
			end-do
		end-if
		
		if(dist_current < dist_star) then
			forall(i in nodes, j in nodes) do
				result_star(i,j) := result_current(i,j)
			end-do
			dist_star := dist_current
			changed := 1
		else
			p_current := random
			!writeln(p_current, "\t", temp)
			if (p_current < temp) then
				forall(i in nodes, j in nodes) do
					result_old(i,j) := result_current(i,j)
				end-do
			end-if
		end-if
		
		!disminuye temperatura
		!
		!
		if(temp > 0) then
			temp := temp - 0.1
		end-if
		if(changed = 1)then
			no_mejoras:=0
		else
			no_mejoras := no_mejoras +1
		end-if
	end-do
	
	forall(i, j in nodes) do
		result(i,j) := result_star(i,j)
	end-do
	
	
	
	t := initial
	write("path: ")
	forall(i in nodes) do
		forall(j in nodes | result(t,j) = 1) do
			write(" -> ", t)
			t := j
		end-do
	end-do
	writeln("\n")
	
	
	writeln("edges: ")
	distance := 0.0
	forall(i in nodes) do
		forall(j in nodes | result(i,j) = 1) do
			writeln("(", i, ", ", j, ")")
			distance := distance +d(i,j)
		end-do
	end-do
	writeln("distance: ", distance)

end-model
