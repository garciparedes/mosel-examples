model ModelName

	uses "mmive"
	
	declarations
		file_name 	= "gasoleos.dat"
		n:			integer
		min_v:		integer
		capacity:	integer
	end-declarations

	initializations from file_name
		n
		min_v
		capacity
	end-initializations
	
	declarations
		nodes 		= 1..n
		nodes_2		= 1..n*n-n
		d:			array(nodes, nodes) of integer
		coords: 	array(nodes, 1..3) of real
		dem:		array(nodes, 1..2) of real
		s:			array(nodes, nodes) of integer
		s_sort:		array(nodes_2, 1..2) of integer
		x:			array(nodes,nodes) of integer
		r:			array(nodes,nodes) of integer
	end-declarations

	initializations from file_name
		d
	end-initializations
	
	forall(i, j in nodes) do
		!d(i,j) :=  round(sqrt((coords(i,2) - coords(j,2))^2 + (coords(i,3) - coords(j,3))^2))
		s(i, j) := d(1, i) + d(1, j) - d(i, j)
	end-do
	
	forall(i in nodes | i <> 1) do
		x(1,i) := 1
		x(i,1) := 1
		forall(j in nodes) do 
			r(i,j) :=  i
		end-do
	end-do
	
	aux_1 := MAX_INT
	k := 1
	forall(ii, jj in nodes | ii <> jj) do
		aux_2 := - MAX_INT
		forall(i, j in nodes | i <> j  ) do
			if(s(i,j) > aux_2 and i > 1 and j >1 and s(i,j) < aux_1 and x(i, 1) = 1 and  x(1,j) = 1) then
				aux_2 := s(i,j)
				s_i := i
				s_j := j
			end-if
		end-do
		aux_1 := s(s_i,s_j)
		writeln(s_i," ", s_j, " --> ", aux_1)
		x(s_i,1) := 0
		x(1,s_j) := 0
		x(s_i,s_j) := 1
	end-do
	
	
	writeln("edges: ")
	forall(i in nodes) do
		forall(j in nodes | x(i,j) = 1) do
			writeln("(", i, ", ", j, ")")
		end-do
	end-do
	vehicles := sum(i in nodes) x(1,i)
	distance := sum(i,j in nodes | x(i,j) = 1) d(i,j)
	writeln("vehicles: ", vehicles)
	writeln("distance: ", distance)
end-model
