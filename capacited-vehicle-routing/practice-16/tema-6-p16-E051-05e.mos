model ModelName

	uses "mmive"
	
	declarations
		file_name 	= "E051-05e.dat"
		n:			integer
		min_v:		integer
		capacity:	integer
	end-declarations

	initializations from file_name
		n
		min_v
		capacity
	end-initializations
	
	declarations
		nodes 		= 1..n
		nodes_2		= 1..n*n-n
		d:			array(nodes, nodes) of integer
		coords: 	array(nodes, 1..3) of real
		dem:		array(nodes, 1..2) of integer
		s:			array(nodes, nodes) of integer
		s_sort:		array(nodes_2, 1..2) of integer
		x:			array(nodes,nodes) of integer
		r:			array(nodes) of integer
		c:			array(nodes) of integer
	end-declarations

	initializations from file_name
		coords
		dem
	end-initializations
	
	forall(i, j in nodes) do
		d(i,j) :=  round(sqrt((coords(i,2) - coords(j,2))^2 + (coords(i,3) - coords(j,3))^2))
		s(i, j) := d(1, i) + d(1, j) - d(i, j)
	end-do
	
	forall(i in nodes | i <> 1) do
		x(1,i) := 1
		x(i,1) := 1
		r(i) :=  i
		c(i) := dem(i,2)
	end-do
	
	aux_1 := MAX_INT
	k := 1
	f_stop := 1
	while(f_stop = 1) do
		distance := sum(i,j in nodes | x(i,j) = 1) d(i,j)
		
		aux_2 := - MAX_INT
		forall(i, j in nodes | i <> j and i > 1 and j > 1 ) do
			if(s(i,j) > aux_2 and s(i,j) < aux_1 and 
				x(i, 1) = 1 and x(1,j) = 1 and r(i) <> r(j) and
				(c(r(i)) + c(r(j))) < capacity) then
				aux_2 := s(i,j)
				s_i := i
				s_j := j
			end-if
		end-do
		aux_1 := s(s_i,s_j)

		c(r(s_i)) := c(r(s_i)) + c(r(s_j))
		c(r(s_j)) := c(r(s_i))
		if(r(s_i) < r(s_j)) then
			r(s_j) := r(s_i)
			t_1 := s_j
			f_change := 1
			while(f_change = 1) do
				forall(i in nodes | x(t_1,i) = 1) t_2 := i
				r(t_2) := r(s_i)
				if(t_2 = 1)then
					f_change := 0
				end-if 
				t_1 := t_2
			end-do
		else
			r(s_i) := r(s_j)
			t_1 := s_i
			f_change := 1
			while(f_change = 1) do
				forall(i in nodes | x(i, t_1) = 1) t_2 := i
				r(t_2) := r(s_i)
				if(t_2 = 1)then
					f_change := 0
				end-if 
				t_1 := t_2
			end-do
		end-if
		x(s_i,1) := 0
		x(1,s_j) := 0
		x(s_i,s_j) := 1
		
		new_distance := sum(i,j in nodes | x(i,j) = 1) d(i,j)
		if(distance <= new_distance) then
			f_stop := 0
		end-if
	end-do
	
	
	writeln("edges: ")
	forall(i in nodes) do
		forall(j in nodes | x(i,j) = 1) do
			writeln("(", i, ", ", j, ") ->", r(j))
		end-do
	end-do
	vehicles := sum(i in nodes) x(1,i)
	distance := sum(i,j in nodes | x(i,j) = 1) d(i,j)
	writeln("vehicles: ", vehicles)
	writeln("distance: ", distance)
	
	id0 := IVEaddplot("depot", IVE_BLACK)
	id1 := IVEaddplot("points", IVE_RED)
	id2 := IVEaddplot("lines", IVE_BLUE)


	IVEdrawpoint(id0, coords(1,2), coords(1,3))
	forall(i in nodes | i > 1) do
		IVEdrawpoint(id1, coords(i,2), coords(i,3))
	end-do

	forall(i, j in nodes | x(i,j) = 1) do
		IVEdrawline(id2, coords(i,2), coords(i,3), coords(j,2), coords(j,3))
	end-do
end-model
