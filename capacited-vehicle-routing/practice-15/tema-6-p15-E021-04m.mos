model ModelName
	uses "mmxprs"
	uses "mmive"
	
	declarations
		file_name 	= "E021-04m.dat"
		n:			integer
		min_v:		integer
		capacity:	integer
	end-declarations

	initializations from file_name
		n
		min_v
		capacity
	end-initializations
	
	declarations
		nodes 		= 1..n
		d:			array(nodes, nodes) of integer
		coords: 	array(nodes, 1..3) of real
		dem:		array(nodes, 1..2) of real
		x:			array(nodes, nodes) of mpvar
		y:			array(nodes, nodes) of mpvar
	end-declarations

	initializations from file_name
		coords
		dem
	end-initializations
	
	forall(i, j in nodes)
		d(i,j) :=  round(sqrt((coords(i,2) - coords(j,2))^2 + (coords(i,3) - coords(j,3))^2))
	
	
	forall(i in nodes | i > 1)
		res_j(i) := sum(j in nodes) x(i,j) = 1
	
	forall(j in nodes | j > 1)
		res_i(j) := sum(i in nodes) x(i,j) = 1
		
	forall(i in nodes | i > 1) do
		res_y(i) := sum(j in nodes) y(i,j) - sum(j in nodes) y(j,i) = - dem(i,2)
	end-do
	res_y(1) := sum(j in nodes) y(1,j) - sum(j in nodes) y(j,1) = sum(j in nodes) dem(j,2)
	
	forall(i,j in nodes) do
		res_c(i,j) := y(i,j) <= capacity * x(i,j)
	end-do
	
	forall(i, j in nodes)
		x(i,j) is_binary
		 
	obj := sum(i,j in nodes) d(i,j) * x(i,j)
	minimize(obj)
	
	writeln("edges: ")
	forall(i in nodes) do
		forall(j in nodes | x(i,j).sol = 1) do
			writeln("(", i, ", ", j, ")")
		end-do
	end-do
	vehicles := sum(i in nodes) x(1,i).sol
	writeln("vehicles: ", vehicles)
	writeln("distance: ", getobjval)

	id0 := IVEaddplot("depot", IVE_BLACK)
	id1 := IVEaddplot("points", IVE_RED)
	id2 := IVEaddplot("lines", IVE_BLUE)


	IVEdrawpoint(id0, coords(1,2), coords(1,3))
	forall(i in nodes | i > 1) do
		IVEdrawpoint(id1, coords(i,2), coords(i,3))
	end-do

	forall(i, j in nodes | x(i,j).sol = 1) do
		IVEdrawline(id2, coords(i,2), coords(i,3), coords(j,2), coords(j,3))
	end-do
end-model
