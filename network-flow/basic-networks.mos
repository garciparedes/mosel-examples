model ModelName
    uses "mmxprs"; 
    
    declarations
        n: integer
        m: integer
    end-declarations

    initializations from "basic-networks.dat"
        n m
    end-initializations
    
    declarations
        vertices =  1..n
        edges = 1..m
        
        demand: array(vertices) of real
        
        A_sparse: array(edges, 1..2) of integer
        A_dense: array(vertices, vertices) of integer
        
        x: array(vertices, vertices) of mpvar
    end-declarations
    
    
    initializations from "basic-networks.dat"
        A_sparse
        demand
    end-initializations
    
    forall(k in edges) do
        A_dense(A_sparse(k, 1), A_sparse(k, 2)) := 1
    end-do
    
    forall(i in vertices) do
        writeln
        forall(j in vertices) do
            write(A_dense(i, j), "\t")
        end-do
    end-do
    writeln
    
    forall(i in vertices) do
        res1(i) := ((sum(j in vertices) x(i, j) * A_dense(i,j)) - (sum(i2 in vertices) x(i2, i) * A_dense(i2,i))) = demand(i)
    end-do    
    objetive := sum(i in vertices, j in vertices) x(i,j)
    
    
    minimize(objetive)
    
    forall(i in vertices) do
        writeln
        forall(j in vertices) do
            write(getsol(x(i, j)), "\t")
        end-do
    end-do
    writeln
    
    writeln
    writeln("objetive = ", getobjval)
    
end-model
