model ""
	uses "mmxprs"; !gain access to the Xpress-Optimizer solver
	uses "mmive"
	uses "mmsystem"


	! INITIALIZATION AND FILE INPUT
	!##############################################################################
	declarations
		n:				integer
		p_min:			integer
		p_max:			integer
	end-declarations

	initializations from "coordenadas_15.dat"
		n
		p_min
		p_max
	end-initializations

	declarations
		nodes 			= 1..n
		p_range 		= p_min..p_max

		raw_data: 		array(nodes, 1..4) of integer
		d:				array(nodes, nodes) of integer

		h:				array(nodes) of integer

		!XPRESS Vars
		x:				array(nodes) of mpvar
		y:				array(nodes, nodes) of mpvar
		
		!Greedy Vars
		solu:			array(nodes) of integer
		fijada:			array(nodes) of integer
		temp_fijada: 	array(nodes) of integer
	end-declarations

	initializations from "coordenadas_15.dat"
		raw_data
	end-initializations

	forall(i in nodes) do
		h(i) := raw_data(i,4)
		forall(j in nodes) do
			!if (i = j) then
			!	d(i,j) := MAX_INT
			!else	
				d(i,j) :=  round(sqrt((raw_data(i,2) - raw_data(j,2))^2 + (raw_data(i,3) - raw_data(j,3))^2))
			!end-if
		end-do
	end-do
	
	id1 := IVEaddplot("points", IVE_RED)
	id2 := IVEaddplot("indices", IVE_BLACK)
	
	forall(i in nodes) do
			IVEdrawpoint(id1, raw_data(i,2), raw_data(i,3))
			IVEdrawlabel(id2, raw_data(i,2)+2, raw_data(i,3)+2,"" + i)
	end-do

	! COMPUTATION
	!##############################################################################

	!XPRESS CONSTANT RESTRICTIONS
	forall(j in nodes)
		x(j) is_binary
	forall(i in nodes, j in nodes)
		y(i, j) is_binary
	z := sum(i in nodes, j in nodes)
			h(i) * d(i,j) * y(i,j)
	forall(i in nodes)
		res_y(i):= sum(j in nodes)
			y(i,j) = 1
	forall(i in nodes, j in nodes)
		res_x_y(i, j):= y(i,j) <= x(j)


	forall(p in p_range)do
		writeln("p = ", p)
		
		!GREEDY SOLUTION
		!#############################################################################

		forall(i in nodes) do 
			solu(i) := 0
			fijada(i) :=0
		end-do
		
		n_cub :=0
		while(n_cub < p) do
			best := MAX_INT
			ndx := n
			forall(i in nodes | fijada(i) = 0) do
				val := 0
				forall(j in nodes) do
					fijada(i) := 1
					temp_best := MAX_INT
					forall(k in nodes | fijada(k) = 1 and d(k,j) < temp_best) do
						temp_best := d(k,j)
					end-do
					fijada(i) := 0
					val := val + temp_best
				end-do
				if (val < best) then
					best := val
					ndx := i
				end-if
			end-do
			fijada(ndx) := 1
			solu(ndx) := 1
			n_cub := n_cub + 1
		end-do
		
		writeln("\tgreedy solution: ")
		writeln("\td_total = ", best)
		write("\tx_abiertos = { ")
		forall(j in nodes | solu(j) = 1) 
			write(j," ")
		writeln("}\n")
		id3 := IVEaddplot("p" + p, IVE_YELLOW)
		forall(j in nodes | solu(j) = 1)
			IVEdrawpoint(id3, raw_data(j,2), raw_data(j,3))
		
		!LOCAL SEARCH SOLUTION
		!#############################################################################

	
		final := 0
		while(final = 0) do 
			d_total_final := sum(i in nodes) min(j in  nodes |solu(j) =1) d(i,j)
			mejora_max := 0
			forall(j,k in nodes | solu(j) = 1 and solu(k) = 0) do
				solu(j) := 0
				solu(k) := 1
				d_total_parcial := sum(ii in nodes) min(jj in  nodes |solu(jj) =1) d(ii,jj)
				
				mejora := d_total_final - d_total_parcial
				
				if(mejora > mejora_max) then 
					mejora_max := mejora
					j_max := j
					k_max := k
				end-if
				solu(j) := 1
				solu(k) := 0
			end-do
			if (mejora_max = 0) then 
				final := 1
			else
				solu(j_max) := 0
				solu(k_max) := 1
			end-if
		end-do
		
		d_total_final := sum(i in nodes) min(j in  nodes |solu(j) =1) d(i,j)
		writeln("\tlocal search solution: ")
		writeln("\td_total = ", d_total_final)
		write("\tx_abiertos = { ")
		forall(j in nodes | solu(j) = 1) 
			write(j," ")
		writeln("}\n")
		id3 := IVEaddplot("p" + p, IVE_GREEN)
		forall(j in nodes | solu(j) = 1)
			IVEdrawpoint(id3, raw_data(j,2), raw_data(j,3))
		

		!XPRESS SOLUTION
		!#############################################################################
		
		rest_p := sum(j in nodes) x(j) = p
		minimize(z)

		writeln("\txpress solution: ")
		writeln("\td_total = ", sum(i in nodes, j in nodes | y(i,j).sol = 1) d(i,j))
		write("\tx_abiertos = { ")
		forall(j in nodes | x(j).sol = 1)
			write(j, " ")
		writeln("}\n")
		id3 := IVEaddplot("p" + p, IVE_BLUE)
		forall(j in nodes | x(j).sol = 1)
			IVEdrawpoint(id3, raw_data(j,2), raw_data(j,3))
	end-do
end-model
