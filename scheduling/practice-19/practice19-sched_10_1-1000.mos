model ""

	declarations
		file_name 	= "sched_10_1-1000.dat"
		task:		integer
		n: 			integer
	end-declarations

	initializations from file_name
		task
		n
	end-initializations

	declarations
		n_iter		= 1..n
		tasks 		= 1..task
		raw:		array(tasks, 1..3) of integer
		p:			array(tasks) of integer
		d:			array(tasks) of integer
		w:			array(tasks) of integer
		r:			array(tasks) of integer

		x:			array(tasks) of integer
		t:			array(tasks) of integer

		x_old:		array(tasks) of integer

	end-declarations


	initializations from file_name
		raw
	end-initializations

	forall(j in tasks) do
		p(j) := raw(j,1)
		w(j) := raw(j,2)
		d(j) := raw(j,3)
	end-do

	delay_old := -1.0
	forall(nn in n_iter) do
		forall(j in tasks) x(j) := 0
		forall(j in tasks) do
			a := 0
			aux := 0
			while( a = 0 or aux = 1) do
				aux := 0
				a := ceil(random * task)
				forall(jj in tasks | x(jj) = a) aux := 1
			end-do
			x(j) := a
		end-do

		t(1) := p(x(1))
		forall(j in tasks | j > 1) do
			t(j) := t(j -1) + p(x(j))
		end-do

		delay := 0.0
		forall(j in tasks) do
			if (t(j) > d(x(j))) then
				delay := delay + (t(j) - d(x(j))) * w(x(j))
			end-if
		end-do

		if (delay_old = -1.0 or delay < delay_old) then
			delay_old := delay
			forall(j in tasks) x_old(j) := x(j)
		end-if
	end-do

	delay := delay_old
	forall(j in tasks) x(j) := x_old(j)

	t(1) := p(x(1))
	forall(j in tasks | j > 1) do
		t(j) := t(j -1) + p(x(j))
	end-do


	writeln(delay)
	forall(j in tasks) do
		writeln("x(",j,") = ",x(j),"\tt(",j,") = ",t(j))
	end-do

end-model
