model "greedy-transportation"
	uses "mmxprs"
	uses "mmsystem"
	uses "random"

	declarations
		m 				= 10
		n 				= 20
		origins 		= 1..m
		destinations 	= 1..n
		cost:			array(origins, destinations) of integer
		offer: 			array(origins) of integer
		demand: 		array(destinations) of integer

		x: 				array(origins, destinations) of mpvar
	end-declarations

	setmtrandseed(273917364)

	writeln("n = ", n)
	writeln("m = ", m)

	forall(j in destinations) do
		demand(j) := round(uniform(10,50))
	end-do
	writeln("demmand(j) = ", demand)

	demand_total := sum(j in destinations) demand(j)
	writeln("demand_total = ", demand_total)

	forall(i in origins) do
		offer(i) := round(uniform(60,80))
	end-do
	writeln("offer(i) = ", offer)

	offer_total := sum(i in origins) offer(i)
	writeln("offer_total = ", offer_total)

	forall(i in origins, j in destinations) do
		cost(i,j) := round(uniform(10,20))
	end-do

	writeln("cost(i,j) = ", cost)


	! Exact Model

	cost_total_obj := sum(i in origins, j in destinations) cost(i, j) * x(i,j)
	forall(i in origins) r1(i):= sum(j in destinations) x(i,j) <= offer(i)
	forall(j in destinations) r2(j) := sum(i in origins) x(i,j) >= demand(j)

	minimize(cost_total_obj)

	writeln("Min cost exact = ", getobjval)

	forall(i in origins) do
		writeln
		forall(j in destinations) do
			write(x(i,j).sol, "\t")
		end-do
	end-do
	writeln

	! Greedy Model

	declarations
		offeres: 	array(origins) of integer
		demres:		array(destinations) of integer

		demcub: 	integer

		xsol:		array(origins, destinations) of integer
	end-declarations

	forall(i in origins) oferes(i) := offer(i)
	forall(j in destinations) demres(j) := demand(j)

	demcub := 0
	final := 0
	cost_total_greedy := 0
	while(final = 0) do

		cmin := 9999
		forall(i in origins, j in destinations | oferes(i) > 0 and demres(j) > 0) do
			if(cost(i, j) < cmin) then
				cmin := cost(i,j)
				imin := i
				jmin := j
			end-if
		end-do

		xsol(imin, jmin) := minlist(oferes(imin), demres(jmin))

		oferes(imin) := oferes(imin) - xsol(imin, jmin)
		demres(jmin) := demres(jmin) - xsol(imin, jmin)

		demcub := demcub + xsol(imin, jmin)

		cost_total_greedy := cost_total_greedy + cost(imin, jmin) * xsol(imin, jmin)


		if(demcub = demand_total) then
			final := 1
		end-if

	end-do

	writeln("Min cost greedy = ", cost_total_greedy)


end-model
