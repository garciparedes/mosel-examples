model "petrol-example-networks"
    uses "mmxprs"; 
    
    declarations
        n = 7
        m = 12
        vertices =  1..n
        edges = 1..m
        
        demand: array(vertices) of real
        
        A_sparse: array(edges, 1..3) of real
        A_dense: array(vertices, vertices) of real
        
        x: dynamic array(vertices, vertices) of mpvar
        
        y_in: array(vertices) of mpvar
        y_out: array(vertices) of mpvar
    end-declarations
    
    demand::[20000000, -4000000, -12000000, -4000000, 0, 0, 0]
    A_sparse::[1, 2, 1.20,
               1, 3, 1.40,
               1, 4, 1.40,
               1, 5, 0.30,
               5, 6, 0.20,
               6, 2, 0.25,
               6, 3, 0.20,
               6, 4, 0.15,
               5, 7, 0.15,
               7, 2, 0.22,
               7, 3, 0.20,
               7, 4, 0.15]
    
    total_demand := 0.0
    total_offer := 0.0
    
    
    forall(k in edges) do
        A_dense(round(A_sparse(k, 1)), round(A_sparse(k, 2))) := A_sparse(k, 3)
    end-do
    
    forall(i in vertices) do
        writeln
        forall(j in vertices) do
            write(A_dense(i, j), "\t")
        end-do
    end-do
    writeln
    
    forall(i in vertices, j in vertices | (i = j and  demand(i) > 0) or A_dense(i, j) <> 0) do
        create(x(i, j))
    end-do
    
    forall(i in vertices) do
        res1(i) := sum(j in vertices) x(i, j) = y_out(i)
        res2(i) := sum(j in vertices) x(j, i) = y_in(i)
    end-do
   
    forall(i in vertices) do
        if demand(i) > 0 then
            res3(i) := y_out(i) = demand(i)
        elif demand(i) < 0 then
            res3(i) := y_in(i) = - demand(i)
        else
            res3(i) := y_in(i) = y_out(i)
        end-if
    end-do

    
    res4 := sum(j in 2..4) x(1, j) >= 0.3 * (sum(i in vertices | demand(i) > 0) demand(i))
    res5 := sum(j in vertices) x(7, j) <= 0.5 * (sum(i in vertices | demand(i) > 0) demand(i))
    
    objetive := sum(i in vertices, j in vertices) x(i,j) * A_dense(i, j)
    
    minimize(objetive)
    
    
    writeln
    write("\t")
    forall(j in vertices) do
       write(j, "\t")
    end-do
    forall(i in vertices) do
        writeln
        write(i, "\t")
        forall(j in vertices) do
            write(getsol(x(i, j)), "\t")
        end-do
    end-do
    writeln
    
    writeln
    writeln("objetive = ", getobjval)
    
end-model
