model "petrol-example-networks"
    uses "mmxprs"; 
    
    declarations
        n = 7
        m = 12
        vertices =  1..n
        edges = 1..m
        
        demand: array(vertices) of real
        
        A: array(vertices, vertices) of real
        
        x: dynamic array(vertices, vertices) of mpvar
    end-declarations
    
    initializations from "petrol-networks.dat"
        demand A
    end-initializations
    
    
    forall(i in vertices) do
        writeln
        forall(j in vertices) do
            write(A(i, j), "\t")
        end-do
    end-do
    writeln
    
    forall(i in vertices, j in vertices | (i = j and  demand(i) > 0) or A(i, j) <> 0) do
        create(x(i, j))
    end-do
    
    forall(i in vertices) do
        if demand(i) > 0 then
            res1(i) := sum(j in vertices) x(i, j) = demand(i)
        elif demand(i) < 0 then
            res1(i) := sum(j in vertices) x(j, i) = - demand(i)
        else
            res1(i) := sum(j in vertices) x(j, i) = sum(j in vertices) x(i, j)
        end-if
    end-do

    
    res4 := sum(j in 2..4) x(1, j) >= 0.3 * (sum(i in vertices | demand(i) > 0) demand(i))
    res5 := sum(j in vertices) x(7, j) <= 0.5 * (sum(i in vertices | demand(i) > 0) demand(i))
    
    objetive := sum(i in vertices, j in vertices) x(i,j) * A(i, j)
    
    minimize(objetive)
    
    
    writeln
    write("\t")
    forall(j in vertices) do
       write(j, "\t")
    end-do
    forall(i in vertices) do
        writeln
        write(i, "\t")
        forall(j in vertices) do
            write(getsol(x(i, j)), "\t")
        end-do
    end-do
    writeln
    
    writeln
    writeln("objetive = ", getobjval)
    
end-model
