model ""

	uses "mmive"

	declarations
		file_name 	= "tsp_100_3.dat"
		n:			integer
	end-declarations

	initializations from file_name
		n
	end-initializations

	declarations
		nodes 		= 1..n
		d:			array(nodes, nodes) of integer
		visited:	array(nodes) of integer
		result:		array(nodes, nodes) of integer
		coords: 	array(nodes, 1..3) of real
	end-declarations

	initializations from file_name
		coords
	end-initializations

	forall(i, j in nodes)
		d(i,j) :=  round(sqrt((coords(i,2) - coords(j,2))^2 + (coords(i,3) - coords(j,3))^2))

	forall(i in nodes) visited(i) := 0
	forall(i in nodes, j in nodes) result(i, j) := 0

	initial := ceil(random * n)
	current := initial
	visited(current) :=1
	forall(t in nodes) do
		aux := MAX_INT
		selected:=-1
		forall(i in nodes | visited(i) = 0) do
			if(aux > d(current, i)) then
				aux := d(current, i)
				selected := i
			end-if
		end-do
		if(selected = -1) then
			selected := initial
		end-if
		result(current, selected) := 1
		current := selected
		visited(current):= 1
	end-do

	t := 1
	counts := 0
	distance := 0.0
	write("path: ")
	while(counts < n) do
		forall(j in nodes | result(t,j) = 1) do
			if(counts < n) then
				write(t, " ")
				distance := distance +d(t,j)
				t := j
				counts := counts + 1
			end-if
		end-do
	end-do
	writeln("\ndistance: ", distance)

	id1 := IVEaddplot("points", IVE_RED)
	id2 := IVEaddplot("lines", IVE_BLUE)

	forall(i in nodes) do
		IVEdrawpoint(id1, coords(i,2), coords(i,3))
	end-do

	forall(i, j in nodes | result(i,j) = 1) do
		IVEdrawline(id2, coords(i,2), coords(i,3), coords(j,2), coords(j,3))
	end-do
end-model
