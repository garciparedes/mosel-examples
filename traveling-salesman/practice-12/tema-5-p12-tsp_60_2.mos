model ""

	uses "mmive"

	declarations
		file_name 	= "tsp_60_2.dat"
		n:		integer
		k_max:	integer
		N_max:	integer
	end-declarations

	initializations from file_name
		n
		k_max
		N_max
	end-initializations

	declarations
		nodes 			= 1..n
		d:				array(nodes, nodes) of integer
		visited:		array(nodes) of integer
		result:			array(nodes, nodes) of integer


		result_copy_2:	array(nodes, nodes) of integer
		k_iter			= 1..k_max
		k_list:			array(k_iter) of integer
		k_marca:		array(nodes) of integer

		N_iter			= 1..N_max
		result_copy:	array(nodes, nodes) of integer
		coords: 	array(nodes, 1..3) of real
	end-declarations

	initializations from file_name
		coords
	end-initializations

	forall(i, j in nodes)
		d(i,j) :=  round(sqrt((coords(i,2) - coords(j,2))^2 + (coords(i,3) - coords(j,3))^2))

	forall(n_i in N_iter) do

		forall(i in nodes) visited(i) := 0
		forall(i in nodes, j in nodes) result(i, j) := 0

		initial := ceil(random * n)
		current := initial
		visited(current) :=1
		forall(t in nodes) do
			forall(k in k_iter) do

				forall(i in nodes) k_marca(i):=0
				aux := MAX_INT
				i_max := -1
				forall(i in nodes | visited(i) = 0 and k_marca(i) = 0 ) do
					if(aux > d(current, i)) then
						aux := d(current, i)
						i_max := i
						k_marca(i_max):=1
					end-if
				end-do
				k_list(k):=i_max
			end-do

			k_win := ceil(random*k_max)
			selected := k_list(k_win)
			if(selected = -1) then
				selected := initial
			end-if
			result(current, selected) := 1
			current := selected
			visited(current):= 1
		end-do

		current_dist := sum(i in nodes, j in nodes | result(i,j) = 1) d(i,j)
		move:=1
		while(move = 1) do
			move := 0
			forall(i in nodes) do
				change := 0
				saved_dist := current_dist
				forall(j in nodes | i <> j) do
					forall(ii in nodes, jj in nodes) result_copy2(ii,jj) := result(ii,jj)

					forall(k in nodes| result(i, k) = 1) i2 := k
					forall(k in nodes| result(j, k) = 1) j2 := k

					result_copy2(i, i2) := 0
					result_copy2(j, j2) := 0

					result_copy2(i, j) := 1
					result_copy2(i2, j2) := 1

					stop_reverse:= 0
					index_reverse := i2
					old := index_reverse
					while(stop_reverse = 0) do
						aux := -1
						forall(k in nodes| k <> old and result_copy2(index_reverse, k) = 1) aux := k
						result_copy2(index_reverse, aux):=0
						result_copy2(aux,index_reverse):=1
						old := index_reverse
						index_reverse := aux
						if(index_reverse = j) then
							stop_reverse := 1
						end-if
					end-do

					new_dist := sum(ii in nodes, jj in nodes | result_copy2(ii,jj) = 1) d(ii,jj)
					if (new_dist < saved_dist) then
						saved_dist := new_dist
						s_i := i
						s_j := j
						s_i2 := i2
						s_j2 := j2
						change := 1
					end-if
				end-do
			end-do
			if (change = 1) then
				result(s_i, s_i2) := 0
				result(s_j, s_j2) := 0

				result(s_i, s_j) := 1
				result(s_i2, s_j2) := 1

				stop_reverse:= 0
				index_reverse := s_i2
				old := index_reverse
				while(stop_reverse = 0) do
					aux := -1
					forall(k in nodes| k <> old and result(index_reverse, k) = 1) aux := k
					result(index_reverse, aux):=0
					result(aux,index_reverse):=1
					old := index_reverse
					index_reverse := aux
					if(index_reverse = s_j) then
						stop_reverse := 1
					end-if
				end-do
				current_dist := sum(ii in nodes, jj in nodes | result(ii,jj) = 1) d(ii,jj)
				move:=1
			end-if
		end-do

		dist := sum(ii in nodes, jj in nodes | result(ii,jj) = 1) d(ii,jj)
		dist_copy := sum(ii in nodes, jj in nodes | result_copy(ii,jj) = 1) d(ii,jj)
		if (dist < dist_copy or dist_copy = 0) then
			forall(i in nodes, j in nodes) do
				result_copy(i,j) := result(i,j)
			end-do
		end-if
	end-do

	forall(i in nodes, j in nodes) do
		result(i,j) := result_copy(i,j)
	end-do
	dist:= dist_copy

	t := 1
	counts := 0
	distance := 0.0
	write("path: ")
	while(counts < n) do
		forall(j in nodes | result(t,j) = 1) do
			if(counts < n) then
				write(t, " ")
				distance := distance +d(t,j)
				t := j
				counts := counts + 1
			end-if
		end-do
	end-do
	writeln("\ndistance: ", distance)


	id1 := IVEaddplot("points", IVE_RED)
	id2 := IVEaddplot("lines", IVE_BLUE)

	forall(i in nodes) do
		IVEdrawpoint(id1, coords(i,2), coords(i,3))
	end-do

	forall(i, j in nodes | result(i,j) = 1) do
		IVEdrawline(id2, coords(i,2), coords(i,3), coords(j,2), coords(j,3))
	end-do
end-model
